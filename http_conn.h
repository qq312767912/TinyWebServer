#ifndef HTTPCONNECTION_H
#define HTTPCONNECTION_H
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/epoll.h>
#include <fcntl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <assert.h>
#include <sys/stat.h>
#include <string.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <stdarg.h>
#include <errno.h>
#include <sys/wait.h>
#include <sys/uio.h>
#include "locker.h"
#include "sql_connection_pool.h"

class http_conn {
public:
	//设置读取文件的名称
	大小
	static const int FILENAME_LEN = 200;
	//设置读缓冲区m_read_buf大小
	static const int READ_BUFFER_SIZE = 2048;
	//设置写缓冲区m_write_buf大小
	static const int WRITE_BUFFER_SIZE = 1024;
	//报文的请求方法
	enum METHOD {
		GET = 0,
		POST
	};
	//主状态机的状态
	enum CHECK_STATE {
		CHECK_STATE_REQUESTLINE = 0,
		CHECK_STATE_HEADER,
		CHECK_STATE_CONTENT
	};
	//报文解析结果
	enum HTTP_CODE {
		NO_REQUEST,//请求行不完整
		GET_REQUEST,//获得了完整的http请求
		BAD_REQUEST,//http请求有语法错误
		NO_RESOURCE,
		FORBIDDEN_REQUEST,
		FILE_REQUEST,//资源存在
		INTERNAL_ERROR,//服务器内部错误
		CLOSED_CONNECTION
	};
	//从状态机状态
	enum LINE_STATUS {
		LINE_OK=0,
		LINE_BAD,
		LINE_OPEN
	};

	http_conn(){}
	~http_conn(){}
	//初始化套接字地址，函数内部会调用私有方法init
	void init(int sockfd, const sockaddr_in &addr);
	//关闭http连接
	void close_conn(bool real_close = true);
	//
	void process();
	//读取浏览器端发来的请求报文，直到无数据可读或对方关闭连接，读取到
	//m_read_buffer中，并更新m_read_idx
	bool read_once();
	//响应报文写入函数
	bool write();
	sockaddr_in *get_address() {
		return &m_address;
	}
	//同步线程初始化数据库读取表，二者取一
	void initmysql_result(connection_pool *connPool);
	//CGI使用连接池初始化数据库表
	void initresultFile(connection_pool *connPool);

private:
	//初始化HTTP对象
	void init();
	//从m_read_buf读取，并处理请求报文
	HTTP_CODE process_read();
	//向m_write_buf写入响应报文数据
	bool process_write(HTTP_CODE ret);
	//主状态机解析报文中的请求行数据
	HTTP_CODE parse_request_line(char* text);
	//主状态机解析报文中的请求头
	HTTP_CODE parse_headers(char* text);
	//主状态机解析报文的请求内容
	HTTP_CODE parse_content(char* text);
	//生成响应报文
	HTTP_CODE do_request();

	//m_start_line是已经解析的字符的下一个字节的地址，是行在buffer中的起始位置，将该位置的下一个位置数据复制给text
	//此时从状态机已经提前将一行的末尾字符\r\n变为\0\0，所以text可以直接取出完整的行进行解析
	//get_line用于将指针向后偏移，指向未处理的字符
	char* get_line() {
		return m_read_buf + m_start_line;
	};
	//从状态机解析一行，分析它是请求报文的哪部分
	LINE_STATUS parse_line();
	void unmap();//?????????

	//根据响应报文格式，生成对应8个部分，以下函数均由do_request调用
	bool add_response(const char *format, ...);
	bool add_content(const char *content);
	bool add_status_line(int status, const char *title);
	bool add_headers(int content_length);
	bool add_content_type();
	bool add_content_length(int content_length);
	bool add_linger();
	bool add_blank_line();

public:
	static int m_epollfd;
	static int m_user_count;
	MYSQL *mysql;

private:
	int m_sockfd;
	sockaddr_in m_address;

	//存储读取的请求报文数据，读缓冲区
	char m_read_buf[READ_BUFFER_SIZE];
	//读缓冲区中数据的最后一个字节的下一个位置,用于判断请求是否被读入
	int m_read_idx;
	//读缓冲区已经读取的位置，从状态机在m_read_buf中读取的位置
	int m_checked_idx;
	//读缓冲区中已经解析的字符个数
	int m_start_line;

	//存储发出的响应报文数据
	char m_write_buf[WRITE_BUFFER_SIZE];
	//指示buffer中的长度
	int m_write_idx;

	//主状态机的状态
	CHECK_STATE m_check_state;
	//请求方法
	METHOD m_method;

	//以下为解析请求报文中对应的6个变量
	char m_real_file[FILENAME_LEN];
	char *m_url;
	char *m_version;
	char *m_host;
	int m_content_length;
	bool m_linger;

	char *m_file_address;   //读取服务器上的文件地址
	struct stat m_file_stat;//stat结构体，保存资源属性
	struct iovec m_iv[2];   //io向量机制iovec,第一个指针指向响应报文缓冲区，长度指向idx;第二个指针指向mmap返回的文件指针，长度指向文件大小
	int m_iv_count;
	int cgi;                //是否启用的POST
	char *m_string;         //存储请求头数据
	int bytes_to_send;      //剩余发送字节数
	int bytes_have_send;    //已发送字节数


};


#endif
